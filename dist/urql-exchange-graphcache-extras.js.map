{"version":3,"file":"urql-exchange-graphcache-extras.js","sources":["../src/extras/relayPagination.ts","../src/extras/simplePagination.ts"],"sourcesContent":["import { stringifyVariables } from 'urql/core';\nimport { Cache, Resolver, Variables, NullArray } from '../types';\n\nexport type MergeMode = 'outwards' | 'inwards';\n\nexport interface PaginationParams {\n  mergeMode?: MergeMode;\n}\n\ninterface PageInfo {\n  __typename: string;\n  endCursor: null | string;\n  startCursor: null | string;\n  hasNextPage: boolean;\n  hasPreviousPage: boolean;\n}\n\ninterface Page {\n  __typename: string;\n  edges: NullArray<string>;\n  pageInfo: PageInfo;\n}\n\nconst defaultPageInfo: PageInfo = {\n  __typename: 'PageInfo',\n  endCursor: null,\n  startCursor: null,\n  hasNextPage: false,\n  hasPreviousPage: false,\n};\n\nconst ensureKey = (x: any): string | null => (typeof x === 'string' ? x : null);\n\nconst concatEdges = (\n  cache: Cache,\n  leftEdges: NullArray<string>,\n  rightEdges: NullArray<string>\n) => {\n  const ids = new Set<string>();\n  for (let i = 0, l = leftEdges.length; i < l; i++) {\n    const edge = leftEdges[i];\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string') ids.add(node);\n  }\n\n  const newEdges = leftEdges.slice();\n  for (let i = 0, l = rightEdges.length; i < l; i++) {\n    const edge = rightEdges[i];\n    const node = cache.resolve(edge, 'node');\n    if (typeof node === 'string' && !ids.has(node)) {\n      ids.add(node);\n      newEdges.push(edge);\n    }\n  }\n\n  return newEdges;\n};\n\nconst compareArgs = (\n  fieldArgs: Variables,\n  connectionArgs: Variables\n): boolean => {\n  for (const key in connectionArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    } else if (!(key in fieldArgs)) {\n      return false;\n    }\n\n    const argA = fieldArgs[key];\n    const argB = connectionArgs[key];\n\n    if (\n      typeof argA !== typeof argB || typeof argA !== 'object'\n        ? argA !== argB\n        : stringifyVariables(argA) !== stringifyVariables(argB)\n    ) {\n      return false;\n    }\n  }\n\n  for (const key in fieldArgs) {\n    if (\n      key === 'first' ||\n      key === 'last' ||\n      key === 'after' ||\n      key === 'before'\n    ) {\n      continue;\n    }\n\n    if (!(key in connectionArgs)) return false;\n  }\n\n  return true;\n};\n\nconst getPage = (\n  cache: Cache,\n  entityKey: string,\n  fieldKey: string\n): Page | null => {\n  const link = ensureKey(cache.resolveFieldByKey(entityKey, fieldKey));\n  if (!link) return null;\n\n  const typename = cache.resolve(link, '__typename') as string;\n  const edges = (cache.resolve(link, 'edges') || []) as NullArray<string>;\n  if (typeof typename !== 'string') {\n    return null;\n  }\n\n  const page: Page = {\n    __typename: typename,\n    edges,\n    pageInfo: defaultPageInfo,\n  };\n\n  const pageInfoKey = cache.resolve(link, 'pageInfo');\n  if (typeof pageInfoKey === 'string') {\n    const pageInfoType = ensureKey(cache.resolve(pageInfoKey, '__typename'));\n    const endCursor = ensureKey(cache.resolve(pageInfoKey, 'endCursor'));\n    const startCursor = ensureKey(cache.resolve(pageInfoKey, 'startCursor'));\n    const hasNextPage = cache.resolve(pageInfoKey, 'hasNextPage');\n    const hasPreviousPage = cache.resolve(pageInfoKey, 'hasPreviousPage');\n\n    const pageInfo: PageInfo = (page.pageInfo = {\n      __typename: typeof pageInfoType === 'string' ? pageInfoType : 'PageInfo',\n      hasNextPage: typeof hasNextPage === 'boolean' ? hasNextPage : !!endCursor,\n      hasPreviousPage:\n        typeof hasPreviousPage === 'boolean' ? hasPreviousPage : !!startCursor,\n      endCursor,\n      startCursor,\n    });\n\n    if (pageInfo.endCursor === null) {\n      const edge = edges[edges.length - 1];\n      if (edge) {\n        const endCursor = cache.resolve(edge, 'cursor');\n        pageInfo.endCursor = ensureKey(endCursor);\n      }\n    }\n\n    if (pageInfo.startCursor === null) {\n      const edge = edges[0];\n      if (edge) {\n        const startCursor = cache.resolve(edge, 'cursor');\n        pageInfo.startCursor = ensureKey(startCursor);\n      }\n    }\n  }\n\n  return page;\n};\n\nexport const relayPagination = (params: PaginationParams = {}): Resolver => {\n  const mergeMode = params.mergeMode || 'inwards';\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    let typename: string | null = null;\n    let startEdges: NullArray<string> = [];\n    let endEdges: NullArray<string> = [];\n    let pageInfo: PageInfo = { ...defaultPageInfo };\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const page = getPage(cache, entityKey, fieldKey);\n      if (page === null) {\n        continue;\n      }\n\n      if (\n        mergeMode === 'inwards' &&\n        typeof args.last === 'number' &&\n        typeof args.first === 'number'\n      ) {\n        const firstEdges = page.edges.slice(0, args.first + 1);\n        const lastEdges = page.edges.slice(-args.last);\n\n        startEdges = concatEdges(cache, startEdges, firstEdges);\n        endEdges = concatEdges(cache, lastEdges, endEdges);\n\n        pageInfo = page.pageInfo;\n      } else if (args.after) {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        pageInfo.endCursor = page.pageInfo.endCursor;\n        pageInfo.hasNextPage = page.pageInfo.hasNextPage;\n      } else if (args.before) {\n        endEdges = concatEdges(cache, page.edges, endEdges);\n        pageInfo.startCursor = page.pageInfo.startCursor;\n        pageInfo.hasPreviousPage = page.pageInfo.hasPreviousPage;\n      } else if (typeof args.last === 'number') {\n        endEdges = concatEdges(cache, endEdges, page.edges);\n        pageInfo = page.pageInfo;\n      } else {\n        startEdges = concatEdges(cache, startEdges, page.edges);\n        pageInfo = page.pageInfo;\n      }\n\n      if (page.pageInfo.__typename !== pageInfo.__typename)\n        pageInfo.__typename = page.pageInfo.__typename;\n      if (typename !== page.__typename) typename = page.__typename;\n    }\n\n    if (typeof typename !== 'string') {\n      return undefined;\n    }\n\n    const hasCurrentPage = !!ensureKey(\n      cache.resolve(entityKey, fieldName, fieldArgs)\n    );\n    if (!hasCurrentPage) {\n      if ((info as any).schemaPredicates === undefined) {\n        return undefined;\n      } else {\n        info.partial = true;\n      }\n    }\n\n    return {\n      __typename: typename,\n      edges:\n        mergeMode === 'inwards'\n          ? concatEdges(cache, startEdges, endEdges)\n          : concatEdges(cache, endEdges, startEdges),\n      pageInfo: {\n        __typename: pageInfo.__typename,\n        endCursor: pageInfo.endCursor,\n        startCursor: pageInfo.startCursor,\n        hasNextPage: pageInfo.hasNextPage,\n        hasPreviousPage: pageInfo.hasPreviousPage,\n      },\n    };\n  };\n};\n","import { stringifyVariables } from 'urql/core';\nimport { Resolver, Variables, NullArray } from '../types';\n\nexport interface PaginationParams {\n  offsetArgument?: string;\n  limitArgument?: string;\n}\n\nexport const simplePagination = ({\n  offsetArgument = 'skip',\n  limitArgument = 'limit',\n}: PaginationParams = {}): Resolver => {\n  const compareArgs = (\n    fieldArgs: Variables,\n    connectionArgs: Variables\n  ): boolean => {\n    for (const key in connectionArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      } else if (!(key in fieldArgs)) {\n        return false;\n      }\n\n      const argA = fieldArgs[key];\n      const argB = connectionArgs[key];\n\n      if (\n        typeof argA !== typeof argB || typeof argA !== 'object'\n          ? argA !== argB\n          : stringifyVariables(argA) !== stringifyVariables(argB)\n      ) {\n        return false;\n      }\n    }\n\n    for (const key in fieldArgs) {\n      if (key === offsetArgument || key === limitArgument) {\n        continue;\n      }\n      if (!(key in connectionArgs)) return false;\n    }\n\n    return true;\n  };\n\n  return (_parent, fieldArgs, cache, info) => {\n    const { parentKey: entityKey, fieldName } = info;\n\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n    if (size === 0) {\n      return undefined;\n    }\n\n    const visited = new Set();\n    let result: NullArray<string> = [];\n    let prevOffset: number | null = null;\n\n    for (let i = 0; i < size; i++) {\n      const { fieldKey, arguments: args } = fieldInfos[i];\n      if (args === null || !compareArgs(fieldArgs, args)) {\n        continue;\n      }\n\n      const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n      const currentOffset = args[offsetArgument];\n\n      if (\n        links === null ||\n        links.length === 0 ||\n        typeof currentOffset !== 'number'\n      ) {\n        continue;\n      }\n\n      if (!prevOffset || currentOffset > prevOffset) {\n        for (let j = 0; j < links.length; j++) {\n          const link = links[j];\n          if (visited.has(link)) continue;\n          result.push(link);\n          visited.add(link);\n        }\n      } else {\n        const tempResult: NullArray<string> = [];\n        for (let j = 0; j < links.length; j++) {\n          const link = links[j];\n          if (visited.has(link)) continue;\n          tempResult.push(link);\n          visited.add(link);\n        }\n        result = [...tempResult, ...result];\n      }\n\n      prevOffset = currentOffset;\n    }\n\n    const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    if (hasCurrentPage) {\n      return result;\n    } else if ((info as any).schemaPredicates === undefined) {\n      return undefined;\n    } else {\n      info.partial = true;\n      return result;\n    }\n  };\n};\n"],"names":["const","defaultPageInfo","__typename","endCursor","startCursor","hasNextPage","hasPreviousPage","ensureKey","x","concatEdges","cache","leftEdges","rightEdges","ids","Set","let","i","l","length","edge","node","resolve","add","newEdges","slice","has","push","compareArgs","fieldArgs","connectionArgs","key","argA","argB","stringifyVariables","getPage","entityKey","fieldKey","link","resolveFieldByKey","typename","edges","page","pageInfo","pageInfoKey","pageInfoType","relayPagination","params","mergeMode","_parent","info","allFields","inspectFields","fieldInfos","filter","fieldName","size","undefined","startEdges","endEdges","args","last","first","firstEdges","lastEdges","after","before","hasCurrentPage","schemaPredicates","partial","simplePagination","ref","offsetArgument","limitArgument","visited","result","prevOffset","links","currentOffset","j","tempResult"],"mappings":"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"}